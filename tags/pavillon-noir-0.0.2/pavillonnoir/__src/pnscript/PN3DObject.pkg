class 				PN3DObject : public PNObject
{
public:
  typedef enum
  {
	RENDER_MODEL			= 0x000001,			/// render 3D object model
	RENDER_MATERIALS		= 0x000001 << 1		/// render 3D object materials (need RENDER_MODEL)
  }							rendermode;

  //////////////////////////////////////////////////////////////////////////
  
public:
  typedef enum
  {
	STATE_T_RIGHT			= 0x000001,			/// Translate to the right
	STATE_T_LEFT			= 0x000001 << 1,	/// Translate to the left
	STATE_T_TOP				= 0x000001 << 2,	/// Translate to the top
	STATE_T_BACK			= 0x000001 << 3,	/// Translate to the back
	STATE_T_FORWARD			= 0x000001 << 4,	/// Translate to the forward
	STATE_T_BACKWARD		= 0x000001 << 5,	/// Translate to the backward
	STATE_R_RIGHT			= 0x000001 << 6,	/// Rotate to the right
	STATE_R_LEFT			= 0x000001 << 7,	/// Rotate to the left
	STATE_R_TOP				= 0x000001 << 8,	/// Rotate to the top
	STATE_R_BACK			= 0x000001 << 9,	/// Rotate to the back
	STATE_R_FORWARD			= 0x000001 << 10,	/// Rotate to the forward
	STATE_R_BACKWARD		= 0x000001 << 11,	/// Rotate to the backward
  }							movingState;

  /// Return bit mask indicate in witch mouving states is the 3D object
  unsigned int					getMovingState();
  /// Set bit mask indicate in witch mouving states is the 3D object
  void						setMovingState(unsigned int mstate);
  /// add bit mask indicate in witch moving states is the 3D object
  void						addMovingState(unsigned int mstate);
  /// sub bit mask indicate in witch moving states is the 3D object
  void						subMovingState(unsigned int mstate);
  /// Get the moving speed of 3D object
  float					getMovingSpeed();
  /// Set the moving speed of 3D object
  void						setMovingSpeed(float mspeed);

  //////////////////////////////////////////////////////////////////////////

public:
  typedef enum
  {
	MMODE_FREE,				/// 3D object move freely
	MMODE_VIEW_LOCKED,		/// 3D object alway try to be in front of _target
	MMODE_VIEW_ABS_LOCKED,	/// 3D object alway in front of _target
	NB_MMODE				/// number of moving modes in 3DObject
  }			  				movingmode;

  /// Return displacement mode of 3D object (free, locked, ...)
  movingmode				getMovingMode();
  /// Set displacement mode of 3D object (free, locked, ...)
  void						setMovingMode(movingmode mmode);

  //////////////////////////////////////////////////////////////////////////

public:
  typedef enum
  {
	OBJTYPE_3DOBJ,			/// Simple 3D object
	OBJTYPE_3DSKELETONOBJ,	/// 3D object with skeleton and skeleton animations
	OBJTYPE_WAYPOINT,		/// Way point used for IA graphs
	OBJTYPE_GROUND,			/// Ground partitioned for optimization and static
	OBJTYPE_CAMERA,			/// A camera
	OBJTYPE_CHARACTER,		/// Game character
	NB_OBJTYPE
  }							objType;

  //////////////////////////////////////////////////////////////////////////

public:
  PNNormal3f				_frontDirection;
  PNNormal3f				_rightDirection;
  PNNormal3f				_topDirection;

  const PNNormal3f&			getFrontDirection() const;
  const PNNormal3f&			getRightDirection() const;
  const PNNormal3f&			getTopDirection() const;

  //////////////////////////////////////////////////////////////////////////
  

public:
  typedef std::vector<PN3DMaterial*>	VectorMaterial;

public:
  /// Default constructor for PN3DObject.
  PN3DObject();
  /// Destructor for PN3DObject.
  ~PN3DObject();

  //////////////////////////////////////////////////////////////////////////
  
  /// Get 3DObject associated file for serialize/unserialize system
   boost::filesystem::path*	getFile();

  /// Modify 3DObject associated file for serialize/unserialize system
   void						setFile(const boost::filesystem::path& file);

  //////////////////////////////////////////////////////////////////////////
  // PNObject

  /// Load 3DObject from xml file
   int					unserialize(const boost::filesystem::path& file);
  /// Load 3DObject from xml file
   int					unserialize();

  /// Save 3DObject into xml file
   int					serialize(std::ostream& o);
  /// Save 3DObject into xml file
   int					serialize();

  //////////////////////////////////////////////////////////////////////////
  
public:
  /// Return 3D object coordinate in 3D scene
   const PNPoint&		getCoord() const;
  /// Return 3D object x coordinate in 3D scene
   float				getX() const;
  /// Return 3D object y coordinate in 3D scene
   float				getY() const;
  /// Return 3D object z coordinate in 3D scene
   float				getZ() const;

  /// Set 3D object coordinate in 3D scene
   void					setCoord(const PNPoint& coord);
  /// Set 3D object coordinate in 3D scene
   void					setCoord(float x, float y, float z);

  /// Return 3D object center coordinate relive to his coordinate
   const PNPoint&		getCenter() const;

   void					move(PNPoint& coord);
   void					moveX(float x);
   void					moveY(float y);
   void					moveZ(float z);

   const PNVector3f &	getUpdateTranslation () const;
   void					setUpdateTranslation(const PNVector3f& translation);

  //////////////////////////////////////////////////////////////////////////

  /// Return 3D object orientation in quaternion
   const PNQuatf&		getOrient() const;
  /// Set 3D object orientation in quaternion
   void					setOrient(const PNQuatf& orient);
  /// Set 3D object orientation in quaternion
   void					setOrient(float x, float y, float z, float w);

   const PNVector3f&		getDirect() const;
   void					setDirect(PNVector3f& direct);
   void					setDirect(float x, float y, float z);

  /// Rotate around right normale
   void					rotatePitchRadians(float pitch);
  /// Rotate around top normale
   void					rotateYawRadians(float yaw);
  /// Rotate around front normale
   void					rotateRollRadians(float roll);
   /// Rotate relative to actual rotation
   void					rotatePYRAxisRadians(const PNVector3f& axis, float phi);

  /// Rotate around X axis
   void					rotateXRadians(float x);
  /// Rotate around Y axis
   void					rotateYRadians(float y);
  /// Rotate around Z axis
   void					rotateZRadians(float z);
  /// Rotate around "axis" axis
   void					rotateAxisRadians(const PNVector3f& axis, float phi);

  //////////////////////////////////////////////////////////////////////////

  /// Return 3D object type
   objType				getObjType() const;

  //////////////////////////////////////////////////////////////////////////
  
  /// Set animation to play and the time used to make the transition between last animation and this
   unsigned int				startAnimation(int animation, unsigned int transTime);
  /// Stop current animation and reset position
   void					stopAnimation();

  /// Pause current animation
   void					pause();

  /// Set speed for current animation, ex: 2.0f = 2 times normal speed
   void					setAnimSpeed(double speed);
  /// Set the automatic looping of animation enable or disable
   void					setEnableLoop(bool enabled);

  //////////////////////////////////////////////////////////////////////////
  
  /// Retrieve number of vertex owned by 3d object
  // unsigned int				getNbVertexComputed();

  /// Fill buffer from step with vertices owned by 3d object
  // unsigned int				computeVertex(float* buffer, unsigned int step = 0);
  /// Fill buffer from step with normales owned by 3d object
  // unsigned int				computeNormales(float* buffer, unsigned int step = 0);
  /// Fill buffer from step with textures coordinates owned by 3d object
  // unsigned int				computeTextCoord(float* buffer, unsigned int step = 0);
  /// Fill buffer from step with colors owned by 3d object
  // unsigned int				computeColors(float* buffer, unsigned int step = 0);

  /// Retrieve number of face owned by 3d object
  // unsigned int				getNbFacesComputed();

  /// Fill buffer from step with faces owned by 3d object
  // unsigned int				computeFaces(PNFace* faces, unsigned int step = 0);

  //////////////////////////////////////////////////////////////////////////
  
  /// Set 3d object target
  void							setTarget(PN3DObject* obj);
  /// Set direction in witch 3D object look the target
  void							setTargetDirection(const PNNormal3f& vec);
  /// Retrieve 3d object target
  PN3DObject					*getTarget() const;

  //////////////////////////////////////////////////////////////////////////

  /// Retrieve model of 3d object
  //PN3DModel*					get3DModel() const;
  /// Set the model of 3d object
  //void							set3DModel(PN3DModel* model);

  /// Retrieve materials list of 3d object
  //const VectorMaterial&			getMaterials() const;

  /// Retrieve physical object of 3d object
  //PNPhysicalObject*				getPhysicalObject() const;
  /// Set the physical object of 3d object
  //bool							setPhysicalObject(PNPhysicalObject* physicalObject);

  //////////////////////////////////////////////////////////////////////////

  /// Set render mode (model, materials) bit mask
  void							setRenderMode(unsigned int mode);
  /// Return render mode bit mask
  int							getRenderMode();

  /// Update object informations
   void					update(unsigned int deltaTime);
  /// Update object position
   void					updateTranslation(float step);
  /// Update object orienation
   void					updateRotation(float step);

  /// Render object using PNRendererInterface
   void					render();
};


