class 						PN3DObject : public PNObject
{
public:
  typedef enum
  {
	RENDER_DIRECTIONS		= 0x000001,			/// Render 3D physical object
	RENDER_MODEL			= 0x000001 << 1,	/// Render 3D object model
	RENDER_MATERIALS		= 0x000001 << 2,	/// Render 3D object materials (need RENDER_MODEL)
	RENDER_PHYSICAL			= 0x000001 << 3,	/// Render 3D physical object
	RENDER_LAST				= 0x000001 << 4
  }							rendermode;

  //////////////////////////////////////////////////////////////////////////
  
public:
  typedef enum
  {
	STATE_T_RIGHT			= 0x000001,			/// Translate to the right
	STATE_T_LEFT			= 0x000001 << 1,	/// Translate to the left
	STATE_T_TOP				= 0x000001 << 2,	/// Translate to the top
	STATE_T_BACK			= 0x000001 << 3,	/// Translate to the back
	STATE_T_FORWARD			= 0x000001 << 4,	/// Translate to the forward
	STATE_T_BACKWARD		= 0x000001 << 5,	/// Translate to the backward
	STATE_R_RIGHT			= 0x000001 << 6,	/// Rotate to the right
	STATE_R_LEFT			= 0x000001 << 7,	/// Rotate to the left
	STATE_R_TOP				= 0x000001 << 8,	/// Rotate to the top
	STATE_R_BACK			= 0x000001 << 9,	/// Rotate to the back
	STATE_R_FORWARD			= 0x000001 << 10,	/// Rotate to the forward
	STATE_R_BACKWARD		= 0x000001 << 11,	/// Rotate to the backward
  }							movingState;

  /// Return bit mask indicate in witch mouving states is the 3D object
  unsigned int				getMovingState();
  /// Set bit mask indicate in witch mouving states is the 3D object
  void						setMovingState(unsigned int mstate);
  /// add bit mask indicate in witch moving states is the 3D object
  void						addMovingState(unsigned int mstate);
  /// sub bit mask indicate in witch moving states is the 3D object
  void						subMovingState(unsigned int mstate);
  /// Get the moving speed of 3D object
  float						getMovingSpeed();
  /// Set the moving speed of 3D object
  void						setMovingSpeed(float mspeed);
  /// Get the ratating Yaw speed of 3D object
  float						getRotatingYawSpeed() const;
  /// Set the ratating Yaw speed of 3D object
  void						setRotatingYawSpeed(float speed);
  /// Get the ratating Pitch speed of 3D object
  float						getRotatingPitchSpeed() const;
  /// Set the ratating Pitch speed of 3D object
  void						setRotatingPitchSpeed(float speed);
  /// Get the ratating Roll speed of 3D object
  float						getRotatingRollSpeed() const;
  /// Set the ratating Roll of 3D object
  void						setRotatingRollSpeed(float speed);

  //////////////////////////////////////////////////////////////////////////

public:
  /// Displacement and view mode
  typedef enum
  {
	TMODE_FREE						= 0x000000,	  		/// 3D object move freely

	TMODE_POSITION_LOCKED			= 0x000001 << 0,	/// 3D object alway try to be in same relative position from target
	TMODE_POSITION_ABS_LOCKED		= 0x000001 << 1,	/// 3D object alway in same relative position from target
    TMODE_DISTANCE_LOCKED			= 0x000001 << 2,	/// 3D object alway try to be at _targetDistance distance from the target
    TMODE_DISTANCE_ABS_LOCKED		= 0x000001 << 3,	/// 3D object alway at _targetDistance distance from the target

	TMODE_ORIENTATION_LOCKED		= 0x000001 << 4,	/// 3D object alway try to be in _targetOrientation orientation
	TMODE_ORIENTATION_ABS_LOCKED	= 0x000001 << 5,	/// 3D object alway in _targetOrientation orientation
	TMODE_VIEW_LOCKED				= 0x000001 << 6,	/// 3D object alway try to be in _targetDirection alignment of _target
	TMODE_VIEW_ABS_LOCKED			= 0x000001 << 7,	/// 3D object alway in _targetDirection alignment of _target

    TMODE_VIEW_DISTANCE_LOCKED		= TMODE_DISTANCE_LOCKED | TMODE_VIEW_LOCKED,			/// TMODE_DISTANCE_LOCKED + TMODE_VIEW_LOCKED
    TMODE_VIEW_DISTANCE_ABS_LOCKED	= TMODE_VIEW_ABS_LOCKED | TMODE_DISTANCE_ABS_LOCKED,	/// TMODE_DISTANCE_ABS_LOCKED + TMODE_VIEW_ABS_LOCKED
  }			  				        movingmode;

  /// Return displacement mode of 3D object (free, locked, ...)
  unsigned int				getTargetMode() const;
  /// Set displacement mode of 3D object (free, locked, ...)
  void						setTargetMode(unsigned int tmode);
  /// Add bit mask indicate in witch moving mode is the 3D object
  void						addTargetMode(unsigned int tmode);
  /// Sub bit mask indicate in witch moving mode is the 3D object
  void						subTargetMode(unsigned int tmode);

  //////////////////////////////////////////////////////////////////////////

public:
  /// Set 3d object target and 3D object distance
  void						setTarget(PN3DObject* obj);
  
  /// Retrieve 3d object position target
  PN3DObject*				getPositionTarget() const;
  /// Retrieve 3d object position target bone
  const std::string&		getPositionBoneTarget();
  /// Retrieve 3d object position coordinate
  PNPoint					getPositionTargetCoord() const;
  /// Retrieve 3d object position orientation
  PNQuatf					getPositionTargetOrient() const;

  /// Change 3d object position target
  void						setPositionTarget(PN3DObject* ptarget);
  /// Change 3d object position target bone
  void						setPositionBoneTarget(const std::string& pbtarget);

  /// Retrieve 3d object view target
  PN3DObject*				getViewTarget() const;
  /// Retrieve 3d object view target bone
  const std::string&		getViewBoneTarget();
  /// Retrieve 3d object position coordinate
  virtual PNPoint			getViewTargetCoord() const;
  /// Retrieve 3d object position orientation
  virtual PNQuatf			getViewTargetOrient() const;

  /// Change 3d object view target
  void						setViewTarget(PN3DObject* vtarget);
  /// Change 3d object view target bone
  void						setViewBoneTarget(const std::string& vbtarget);

  /// Set Position depending on the target
  void						setTargetPosition(float x, float y, float z);
  /// Set Distance to the target
  void						setTargetDistance(float distance);
  /// Set Direction in witch 3D object look to the target
  void						setTargetDirection(const PNNormal3f& vec);
  /// Set Orientation depending on the target
  void						setTargetOrientation(const PNQuatf& quat);

  //////////////////////////////////////////////////////////////////////////

public:
  typedef enum
  {
	OBJTYPE_3DOBJ,			/// Simple 3D object
	OBJTYPE_3DSKELETONOBJ,	/// 3D object with skeleton and skeleton animations
	OBJTYPE_WAYPOINT,		/// Way point used for IA graphs
	OBJTYPE_GROUND,			/// Ground partitioned for optimization and static
	OBJTYPE_CAMERA,			/// A camera
	OBJTYPE_CHARACTER,		/// Game character
	NB_OBJTYPE
  }							objType;

  //////////////////////////////////////////////////////////////////////////

public:
  PNNormal3f				_frontDirection;
  PNNormal3f				_rightDirection;
  PNNormal3f				_topDirection;

  const PNNormal3f&			getFrontDirection() const;
  const PNNormal3f&			getRightDirection() const;
  const PNNormal3f&			getTopDirection() const;

  //////////////////////////////////////////////////////////////////////////
  

public:
  typedef std::vector<PN3DMaterial*>	VectorMaterial;

public:
  /// Default constructor for PN3DObject.
  PN3DObject();
  /// Destructor for PN3DObject.
  ~PN3DObject();

  //////////////////////////////////////////////////////////////////////////
  // PNObject

  /// Load 3DObject from xml file
   int						unserializeFromFile(const std::string& file);
  /// Load 3DObject from xml file
   int						unserialize();

  /// Save 3DObject into xml file
   int						serializeInStream(std::ostream& o);
  /// Save 3DObject into xml file
   int						serialize();

  //////////////////////////////////////////////////////////////////////////
  
public:
  /// Return 3D object coordinate in 3D scene
   const PNPoint&			getCoord() const;
  /// Return 3D object x coordinate in 3D scene
   float					getX() const;
  /// Return 3D object y coordinate in 3D scene
   float					getY() const;
  /// Return 3D object z coordinate in 3D scene
   float					getZ() const;

  /// Set 3D object coordinate in 3D scene
   void						setCoord(const PNPoint& coord);
  /// Set 3D object coordinate in 3D scene
   void						setCoord(float x, float y, float z);

  /// Return 3D object center coordinate relive to his coordinate
   const PNPoint&			getCenter() const;

   void						move(PNPoint& coord);
   void						moveX(float x);
   void						moveY(float y);
   void						moveZ(float z);

   const PNVector3f &		getUpdateTranslation () const;
   void						setUpdateTranslation(const PNVector3f& translation);

  //////////////////////////////////////////////////////////////////////////

  /// Return 3D object orientation in quaternion
   const PNQuatf&			getOrient() const;
  /// Set 3D object orientation in quaternion
   void						setOrient(const PNQuatf& orient);
  /// Set 3D object orientation in quaternion
   void						setOrient(float x, float y, float z, float w);

  /// Rotate around right normale
   void						rotatePitchRadians(float pitch);
  /// Rotate around top normale
   void						rotateYawRadians(float yaw);
  /// Rotate around front normale
   void						rotateRollRadians(float roll);
   /// Rotate relative to actual rotation
   void						rotatePYRAxisRadians(const PNVector3f& axis, float phi);

  /// Rotate around X axis
   void						rotateXRadians(float x);
  /// Rotate around Y axis
   void						rotateYRadians(float y);
  /// Rotate around Z axis
   void						rotateZRadians(float z);
  /// Rotate around "axis" axis
   void						rotateAxisRadians(const PNVector3f& axis, float phi);

  //////////////////////////////////////////////////////////////////////////

  /// Return 3D object type
   objType					getObjType() const;

  //////////////////////////////////////////////////////////////////////////
  
  /// Retrieve number of vertex owned by 3d object
  // unsigned int			getNbVertexComputed();

  /// Fill buffer from step with vertices owned by 3d object
  // unsigned int			computeVertex(float* buffer, unsigned int step = 0);
  /// Fill buffer from step with normales owned by 3d object
  // unsigned int			computeNormales(float* buffer, unsigned int step = 0);
  /// Fill buffer from step with textures coordinates owned by 3d object
  // unsigned int			computeTextCoord(float* buffer, unsigned int step = 0);
  /// Fill buffer from step with colors owned by 3d object
  // unsigned int			computeColors(float* buffer, unsigned int step = 0);

  /// Retrieve number of face owned by 3d object
  // unsigned int			getNbFacesComputed();

  /// Fill buffer from step with faces owned by 3d object
  // unsigned int			computeFaces(PNFace* faces, unsigned int step = 0);
  //////////////////////////////////////////////////////////////////////////
  /// Get minimum x y z coordinate
  const PNPoint&	getMin() const;
  /// Get maximum x y z coordinate
  const PNPoint&	getMax() const;
  //////////////////////////////////////////////////////////////////////////

  /// Retrieve model of 3d object
  //PN3DModel*				get3DModel() const;
  /// Set the model of 3d object
  //void					set3DModel(PN3DModel* model);

  /// Retrieve materials list of 3d object
  //const VectorMaterial&	getMaterials() const;

  /// Retrieve physical object of 3d object
  //PNPhysicalObject*		getPhysicalObject() const;
  /// Set the physical object of 3d object
  //bool					setPhysicalObject(PNPhysicalObject* physicalObject);

  //////////////////////////////////////////////////////////////////////////

  /// Set render mode (model, materials) bit mask
  void						setRenderMode(unsigned int mode);
  /// Return render mode bit mask
  int						getRenderMode();

  /// Update object informations
   void						update(unsigned int deltaTime);
  /// Update object position
   void						updateTranslation(float step);
  /// Update object orienation
   void						updateRotation(float step);

  /// Render object using PNRendererInterface
   void						render();
   
   void						setId(std::string id);
   std::string				getId();
};


