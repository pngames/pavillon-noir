class 	PNVector3f : public PNPoint3f
{
public:
  PNVector3f	();
  PNVector3f	(float x, float y, float z);
  PNVector3f	(const PNPoint3f& source);
  PNVector3f	(const PNPoint3f& origin, const PNPoint3f& destination);

public:
   ~PNVector3f	();

public:
   void	setCrd	(float vX, float vY, float vZ);
   void	setArray(const float * array);

public:  
   void	 get	(float &destX, float &destY, float &destZ); 
   void	 get	(float * array);

public:
   void setFromSegment		(const PNPoint3f& origin, const PNPoint3f& extremity);
  
public:
   bool	isColinear			(const PNVector3f & v);
   bool isColinear			(float vX, float vY, float vZ);
   bool	isOrthogonal		(const PNVector3f & v);
   bool	isOrthogonal		(float vX, float vY, float vZ);
   bool	isNull				();

public:
   void	substract			(const PNPoint3f& v);
   void	substract			(float vX, float vY, float vZ);
   void	substract			(const PNPoint3f& v, const PNPoint3f& u);
   void	add					(const PNPoint3f& v);
   void	add					(const PNPoint3f& u, const PNPoint3f& v);  
   void	add					(float vX, float vY, float vZ);
   void	multiply			(float constant);
  
public:
  void		setNorm			(float newNorm);
  float	getNorm			() const;
  
public:
   float scalarProduct		(const PNVector3f & v) const;
   float scalarProduct		(float vX, float vY, float vZ) const;
   void	  crossProduct		(const PNVector3f & u, const PNVector3f & v);

public:
   bool	isBelongToSegment	(const PNPoint3f& origin, const PNPoint3f& extremity);
   bool	intersection		(const PNPoint3f& originOne, const PNPoint3f& extremityOne, const PNPoint3f& originTwo, const PNPoint3f& extremityTwo);

public: /* special points */
  static const PNVector3f ZERO;
  static const PNVector3f UNIT_X;
  static const PNVector3f UNIT_Y;
  static const PNVector3f UNIT_Z;
  static const PNVector3f NEGATIVE_UNIT_X;
  static const PNVector3f NEGATIVE_UNIT_Y;
  static const PNVector3f NEGATIVE_UNIT_Z;
  static const PNVector3f UNIT_SCALE;
};