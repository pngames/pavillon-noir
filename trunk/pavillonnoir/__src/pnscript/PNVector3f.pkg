class 	PNVector3f : public PNPoint
{
public:
  PNVector3f	();
  PNVector3f	(float x, float y, float z);
  PNVector3f	(const PNPoint & source);
  PNVector3f	(const PNPoint & origin, const PNPoint & destination);

public:
   ~PNVector3f	();

public:
   void	setCrd	(float vX, float vY, float vZ);
   void	setArray(const float * array);

public:  
   void	 get	(float &destX, float &destY, float &destZ); 
   void	 get	(float * array);

public:
   void setFromSegment		(const PNPoint & origin, const PNPoint & extremity);
  
public:
   bool	isColinear			(const PNVector3f & v);
   bool isColinear			(float vX, float vY, float vZ);
   bool	isOrthogonal		(const PNVector3f & v);
   bool	isOrthogonal		(float vX, float vY, float vZ);
   bool	isNull				();

public:
   void	substract			(const PNPoint & v);
   void	substract			(float vX, float vY, float vZ);
   void	substract			(const PNPoint & v, const PNPoint & u);
   void	add					(const PNPoint & v);
   void	add					(const PNPoint & u, const PNPoint & v);  
   void	add					(float vX, float vY, float vZ);
   void	multiply			(float constant);
  
public:
  void		setNorm			(float newNorm);
  float	getNorm			() const;
  
public:
   float scalarProduct		(const PNVector3f & v) const;
   float scalarProduct		(float vX, float vY, float vZ) const;
   void	  crossProduct		(const PNVector3f & u, const PNVector3f & v);

public:
   bool	isBelongToSegment	(const PNPoint & origin, const PNPoint & extremity);
   bool	intersection		(const PNPoint & originOne, const PNPoint & extremityOne, const PNPoint & originTwo, const PNPoint & extremityTwo);

public:
   std::string toString	(std::string title);

public: /* XXX: unit test interface, Don't TOUCH! */
   bool	___IsEqualsTo		(PNVector3f * testable, std::string & bugReport);
   bool	___IsNotEqualsTo	(PNVector3f * testable, std::string & bugReport);

public: /* special points */
  static const PNVector3f ZERO;
  static const PNVector3f UNIT_X;
  static const PNVector3f UNIT_Y;
  static const PNVector3f UNIT_Z;
  static const PNVector3f NEGATIVE_UNIT_X;
  static const PNVector3f NEGATIVE_UNIT_Y;
  static const PNVector3f NEGATIVE_UNIT_Z;
  static const PNVector3f UNIT_SCALE;
};